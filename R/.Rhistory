# Load package
library(marmap)
#  Fetch data on NOAA servers and write on disk
bat <- getNOAA.bathy(-20, 0, 40, 60, res = 4, keep=TRUE)
# Create nice looking color palettes
blues <- c("lightsteelblue4", "lightsteelblue3", "lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
# Plot
plot(bat, image = TRUE, land = TRUE, lwd = 0.1, bpal = list(c(0, max(bat), greys), c(min(bat), 0, blues)))
plot(bat, lwd = 0.8, deep = 0, shallow = 0, step = 0, add = TRUE) # highlight coastline
# Plot
plot(bat, image = TRUE, land = TRUE, lwd = 0.0, bpal = list(c(0, max(bat), greys), c(min(bat), 0, blues)))
plot(bat, lwd = 0.8, deep = 0, shallow = 0, step = 0, add = TRUE) # highlight coastline
# Plot
plot(bat, image = TRUE, land = TRUE, lwd = 0.1, bpal = list(c(0, max(bat), greys), c(min(bat), 0, blues)))
plot(bat, lwd = 0.8, deep = 0, shallow = 0, step = 0, add = TRUE) # highlight coastline
plot(bat, image = TRUE, land = TRUE, lwd = 0.1, bpal = list(c(0, max(bat), greys), c(min(bat), 0, blues)))
plot(bat, lwd = 0.8, deep = 0, shallow = 0, step = 0, add = TRUE) # highlight coastline
# Import bathymetry
bat <- getNOAA.bathy(-100, -80, 22, 31, res = 1, keep = TRUE)
# Load location of individuals (these are NOT from Viricel 2012)
loc <- data.frame( x = c(-96.92707, -96.60861, -96.86875, -96.14351, -92.82518, -90.86053, -90.14208, -84.64081, -83.81274, -81.13277, -80.33498, -88.52732, -94.46049), y = c(25.38657, 25.90644, 26.57339, 27.63348, 29.03572, 28.16380, 28.21235, 26.71302, 25.12554, 24.50031, 24.89052, 30.16034, 29.34550) )
# Compute least cost paths between -5m and -300m.
# Beware! Computation takes time with high resolution bathymetries!
tr <- trans.mat(bat, min.depth = -5, max.depth = -300)
cost <- lc.dist(tr, loc, res="path")
# Plot map with isobaths every 1000m
plot(bat, image = TRUE, land = TRUE, deep=-4000, shallow=-1000, step=1000, drawlabels = FALSE, bpal = list(c(min(bat,na.rm=TRUE), 0, blues), c(0, max(bat, na.rm=TRUE), greys)), lwd = 0.1)
# Add -300m isobath
plot(bat, deep = -300, shallow = -300, step = 0, lwd = 0.5, add = TRUE, drawlabels = TRUE)
# Add coastline
plot(bat, deep = 0, shallow = 0, step = 0, lwd = 1, add = TRUE)
# Add least cost paths and the position of individuals
dummy <- lapply(cost, lines, col = col2alpha("orange", 0.5), lwd = 0.8, lty = 1)
points(loc, bg = "orange", cex = 0.8, pch = 21)
View(loc)
View(loc)
View(dummy)
View(cost)
13*13
13*13/2
?lc.dist
cost2 <- lc.dist(tr, loc, res="dist")
cost2
setwd("~/GitHub/pacific_herring_RADseq/R")
# read in text file containing lat/long coordinates for each population
geo_df <- read.delim("metadata_df.txt")
View(geo_df)
?getNOAA.bathy
View(geo_df)
# Import bathymetry
bat <- getNOAA.bathy(-136, -122, 47, 59, res = 4, keep = TRUE)
# Excellent tutorial on marmap package:
#https://www.molecularecologist.com/2015/07/marmap/
# Load library
library(marmap)
# read in text file containing lat/long coordinates for each population
geo_df <- read.delim("metadata_df.txt")
# Import bathymetry
bathy_mat <- getNOAA.bathy(-136, -122, 47, 59, res = 4, keep = TRUE)
View(geo_df)
geo_df <- geo_df %>% #keep only the lat/long columns of the dataframe (exclude any other columns)
select(latitude, longitude)
View(geo_df)
library(tidyverse)
geo_df <- geo_df %>% #keep only the lat/long columns of the dataframe (exclude any other columns)
select(latitude, longitude)
View(geo_df)
?trans.mat
# Compute least cost paths between all points. Herring are allowed to move through water as shallow as -1m.
# Beware! Computation takes time with high resolution bathymetries!
tr_mat <- trans.mat(bat, min.depth = -1)
# Compute least cost paths between all points. Herring are allowed to move through water as shallow as -1m.
# Beware! Computation takes time with high resolution bathymetries!
tr_mat <- trans.mat(bathy_mat, min.depth = -1)
cost_path <- lc.dist(tr_mat, geo_df, res="path")
cost_dist <- lc.dist(tr_mat, geo_df, res="dist")
# Plot map with isobaths every 1000m
plot(bathy_mat, image = TRUE, land = TRUE, deep=-4000, shallow=-1000, step=1000, drawlabels = FALSE, bpal = list(c(min(bathy_mat,na.rm=TRUE), 0, blues), c(0, max(bathy_mat, na.rm=TRUE), greys)), lwd = 0.1)
# Load library
library(marmap)
# Plot map with isobaths every 1000m
plot(bathy_mat, image = TRUE, land = TRUE, deep=-4000, shallow=-1000, step=1000, drawlabels = FALSE, bpal = list(c(min(bathy_mat,na.rm=TRUE), 0, blues), c(0, max(bathy_mat, na.rm=TRUE), greys)), lwd = 0.1)
blues <- c("lightsteelblue4", "lightsteelblue3", "lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
plot(bathy_mat, image = TRUE, land = TRUE, deep=-4000, shallow=-1000, step=1000, drawlabels = FALSE, bpal = list(c(min(bathy_mat,na.rm=TRUE), 0, blues), c(0, max(bathy_mat, na.rm=TRUE), greys)), lwd = 0.1)
plot(bathy_mat, image = TRUE, land = TRUE, deep=-4000, shallow=-1000, step=1000, drawlabels = FALSE, bpal = list(c(min(bathy_mat,na.rm=TRUE), 0, blues), c(0, max(bathy_mat, na.rm=TRUE), greys)), lwd = 0.0)
plot(bathy_mat, image = TRUE, land = TRUE, deep=-4000, shallow=-1000, step=1000, drawlabels = FALSE, bpal = list(c(min(bathy_mat,na.rm=TRUE), 0, blues), c(0, max(bathy_mat, na.rm=TRUE), greys)), lwd = 0.0)
plot(bathy_mat, image = TRUE, land = TRUE, deep=-4000, shallow=-1000, step=1000, drawlabels = FALSE, bpal = list(c(min(bathy_mat,na.rm=TRUE), 0, blues), c(0, max(bathy_mat, na.rm=TRUE), greys)), lwd = 0.0)
# Add -300m isobath
plot(batbathy_mat, deep = -300, shallow = -300, step = 0, lwd = 0.5, add = TRUE, drawlabels = TRUE)
# Add -300m isobath
plot(bathy_mat, deep = -300, shallow = -300, step = 0, lwd = 0.5, add = TRUE, drawlabels = TRUE)
# Add coastline
plot(bathy_mat, deep = 0, shallow = 0, step = 0, lwd = 1, add = TRUE)
# Add coastline
plot(bathy_mat, deep = 0, shallow = 0, step = 0, lwd = 1, add = TRUE)
plot(bathy_mat, image = TRUE, land = TRUE, deep=-4000, shallow=-1000, step=1000, drawlabels = FALSE, bpal = list(c(min(bathy_mat,na.rm=TRUE), 0, blues), c(0, max(bathy_mat, na.rm=TRUE), greys)), lwd = 0.1)
# Add coastline
plot(bathy_mat, deep = 0, shallow = 0, step = 0, lwd = 1, add = TRUE)
# Add the sampling locations
points(geo_df, bg = "orange", cex = 0.8, pch = 21)
cost_path <- lc.dist(tr_mat, geo_df, res="path")
# Import bathymetry
bathy_mat <- getNOAA.bathy(-138, -120, 44, 61, res = 4, keep = TRUE)
# Compute least cost paths between all points. Herring are allowed to move through water as shallow as -1m.
# Beware! Computation takes time with high resolution bathymetries!
tr_mat <- trans.mat(bathy_mat, min.depth = -1) # this output is stored in matrix
cost_path <- lc.dist(tr_mat, geo_df, res="path")
cost_dist <- lc.dist(tr_mat, geo_df, res="dist")
# Import bathymetry
bathy_mat <- getNOAA.bathy(-138, -120, 44, 61, res = 1, keep = TRUE)
# Compute least cost paths between all points. Herring are allowed to move through water as shallow as -1m.
# Beware! Computation takes time with high resolution bathymetries!
tr_mat <- trans.mat(bathy_mat, min.depth = -1) # this output is stored in matrix
cost_path <- lc.dist(tr_mat, geo_df, res="path")
cost_dist <- lc.dist(tr_mat, geo_df, res="dist")
# Plot with ggplot2
autoplot(bathy_mat, geom=c("raster", "contour"), colour="white", size=0.1) + scale_fill_gradient2(low="dodgerblue4", mid="gainsboro", high="darkgreen")
tr_mat <- trans.mat(bathy_mat, min.depth = 0) # this output is stored in matrix
cost_path <- lc.dist(tr_mat, geo_df, res="path")
cost_dist <- lc.dist(tr_mat, geo_df, res="dist")
# Import bathymetry
bathy_mat <- getNOAA.bathy(-138, -120, 44, 61, res = 4, keep = TRUE)
# Compute least cost paths between all points. Herring are allowed to move through water as shallow as -1m.
# Beware! Computation takes time with high resolution bathymetries!
tr_mat <- trans.mat(bathy_mat, min.depth = 0) # this output is stored in matrix
cost_path <- lc.dist(tr_mat, geo_df, res="path")
cost_dist <- lc.dist(tr_mat, geo_df, res="dist")
# Plot map with isobaths every 1000m
# Plot with ggplot2
autoplot(bathy_mat, geom=c("raster", "contour"), colour="grey", size=0.1) +
scale_fill_gradient2(low="dodgerblue4", mid="gainsboro", high="darkgreen")
# Plot map with isobaths every 1000m
# Plot with ggplot2
autoplot(bathy_mat, geom=c("raster", "contour"), colour="grey", size=0.1) +
scale_fill_gradient2(low="dodgerblue4", mid="lightblue", high="darkgreen")
gainsboro
# Plot map with isobaths every 1000m
# Plot with ggplot2
autoplot(bathy_mat, geom=c("raster", "contour"), colour="grey", size=0.1) +
scale_fill_gradient2(low="dodgerblue4", mid="gainsboro", high="darkgreen")+
geom_point(data = geo_df, aes(x = latitude, y = longitude))
?getNOAA.bathy
max(bathy_mat)
min(bathy_mat)
tr_mat <- trans.mat(bathy_mat, min.depth = 3288) # this output is stored in matrix
cost_path <- lc.dist(tr_mat, geo_df, res="path")
cost_dist <- lc.dist(tr_mat, geo_df, res="dist")
?get.depth
# create vectors of latitude and longitude
lon <- geo_df$longitude
lat <- geo_df$latitude
# Import bathymetry
bathy_mat <- getNOAA.bathy(-138, -120, 44, 61, res = 4, keep = TRUE)
# a simple example
plot(bathy_mat, lwd=.5)
points(lon,lat,pch=19,col=2)
# Use get.depth to get the depth for each point
get.depth(bathy_mat, x=lon, y=lat, locator=FALSE)
# Import bathymetry
bathy_mat <- getNOAA.bathy(-138, -120, 44, 61, res = 1, keep = TRUE)
# a simple example
plot(bathy_mat, lwd=.5)
points(lon,lat,pch=19,col=2)
# Use get.depth to get the depth for each point
get.depth(bathy_mat, x=lon, y=lat, locator=FALSE)
tr_mat <- trans.mat(bathy_mat, min.depth = 0) # this output is stored in matrix
install.packages("gdistance")
library(RCurl) # if you do not have the package rcurl installed please load from CRAN.
#links for the 'raw' code
Weblink <- c("https://raw.githubusercontent.com/rystanley/CartDist/master/CartDistFunction.R")
#source the 'raw' code links into the local environment
script <- RCurl::getURL(Weblink, ssl.verifypeer = FALSE)
eval(parse(text = script),envir=.GlobalEnv)
rm(script)
#Run the cartesian reprojection code
coord_cartesian("examplecoordinates.csv", min.depth=0,max.depth=NULL, gridres=2)
# Use get.depth to get the depth for each point
get.depth(bathy_mat, x=lon, y=lat, locator=FALSE)
# Excellent tutorial on marmap package:
#https://www.molecularecologist.com/2015/07/marmap/
# Load library
library(marmap)
library(tidyverse)
# read in text file containing lat/long coordinates for each population
geo_df <- read.delim("metadata_df.txt")
geo_df <- geo_df %>% #keep only the lat/long columns of the dataframe (exclude any other columns)
select(latitude, longitude)
# Import bathymetry
bathy_mat <- getNOAA.bathy(-138, -120, 44, 61, res = 1, keep = TRUE)
# Compute least cost paths between all points. Herring are allowed to move through water as shallow as -1m.
# Beware! Computation takes time with high resolution bathymetries!
tr_mat <- trans.mat(bathy_mat, min.depth = 400) # this output is stored in matrix
cost_path <- lc.dist(tr_mat, geo_df, res="path")
cost_dist <- lc.dist(tr_mat, geo_df, res="dist")
# Plot map with isobaths every 1000m
# Plot with ggplot2
autoplot(bathy_mat, geom=c("raster", "contour"), colour="grey", size=0.1) +
scale_fill_gradient2(low="dodgerblue4", mid="gainsboro", high="darkgreen")+
geom_point(data = geo_df, aes(x = latitude, y = longitude))
# Plot map with isobaths every 1000m
# Plot with ggplot2
autoplot(bathy_mat, geom=c("raster", "contour"), colour="grey", size=0.1) +
scale_fill_gradient2(low="dodgerblue4", mid="gainsboro", high="darkgreen")
# Add least cost paths and the position of individuals
dummy <- lapply(cost_path, lines, col = col2alpha("orange", 0.5), lwd = 0.8, lty = 1)
# Use get.depth to get the depth for each point
get.depth(bathy_mat, x=lon, y=lat, locator=FALSE)
?autoplot
class(bathy_mat)
?autoplot
??autoplot
autoplot
?autoplot
# Plot map with isobaths every 1000m
# Plot with ggplot2
autoplot(bathy_mat, geom=c("raster", "contour"), colour="grey", size=0.1) +
scale_fill_gradient2(low="dodgerblue4", mid="gainsboro", high="darkgreen") +
autolayer(lon)
# Plot map with isobaths every 1000m
# Plot with ggplot2
autoplot(bathy_mat, geom=c("raster", "contour"), colour="grey", size=0.1) +
scale_fill_gradient2(low="dodgerblue4", mid="gainsboro", high="darkgreen") +
autolayer(geo_df)
# Plot map with isobaths every 1000m
# Plot with ggplot2
autoplot(bathy_mat, geom=c("raster", "contour"), colour="grey", size=0.1) +
scale_fill_gradient2(low="dodgerblue4", mid="gainsboro", high="darkgreen")
# Plot map with isobaths every 1000m
# Plot with ggplot2
plot1 <- autoplot(bathy_mat, geom=c("raster", "contour"), colour="grey", size=0.1) +
scale_fill_gradient2(low="dodgerblue4", mid="gainsboro", high="darkgreen")
plot1 +
geom_point(data = geo_df, aes(x = longitude, y = latitude))
plot1 +
geom_point(data = geo_df, aes(x = longitude, y = latitude), color = "red", size = 2)
# Import bathymetry
bathy_mat <- getNOAA.bathy(-138, -120, 44, 61, res = 10, keep = TRUE)
# Compute least cost paths between all points. Herring are allowed to move through water as shallow as -1m.
# Beware! Computation takes time with high resolution bathymetries!
tr_mat <- trans.mat(bathy_mat, min.depth = -1) # this output is stored in matrix
cost_path <- lc.dist(tr_mat, geo_df, res="path")
cost_dist <- lc.dist(tr_mat, geo_df, res="dist")
# Plot map with isobaths every 1000m
# Plot with ggplot2
plot1 <- autoplot(bathy_mat, geom=c("raster", "contour"), colour="grey", size=0.1) +
scale_fill_gradient2(low="dodgerblue4", mid="gainsboro", high="darkgreen")
plot1 +
geom_point(data = geo_df, aes(x = longitude, y = latitude), color = "red", size = 2)
bathy_mat <- getNOAA.bathy(-138, -120, 44, 61, res = 4, keep = TRUE)
# Compute least cost paths between all points. Herring are allowed to move through water as shallow as -1m.
# Beware! Computation takes time with high resolution bathymetries!
tr_mat <- trans.mat(bathy_mat, min.depth = -1) # this output is stored in matrix
cost_path <- lc.dist(tr_mat, geo_df, res="path")
cost_dist <- lc.dist(tr_mat, geo_df, res="dist")
# Plot map with isobaths every 1000m
# Plot with ggplot2
plot1 <- autoplot(bathy_mat, geom=c("raster", "contour"), colour="grey", size=0.1) +
scale_fill_gradient2(low="dodgerblue4", mid="gainsboro", high="darkgreen")
plot1 +
geom_point(data = geo_df, aes(x = longitude, y = latitude), color = "red", size = 2)
bathy_mat <- getNOAA.bathy(-138, -120, 44, 61, res = 1, keep = TRUE)
# Compute least cost paths between all points. Herring are allowed to move through water as shallow as -1m.
# Beware! Computation takes time with high resolution bathymetries!
tr_mat <- trans.mat(bathy_mat, min.depth = -1) # this output is stored in matrix
cost_path <- lc.dist(tr_mat, geo_df, res="path")
cost_dist <- lc.dist(tr_mat, geo_df, res="dist")
# Plot map with isobaths every 1000m
# Plot with ggplot2
plot1 <- autoplot(bathy_mat, geom=c("raster", "contour"), colour="grey", size=0.1) +
scale_fill_gradient2(low="dodgerblue4", mid="gainsboro", high="darkgreen")
plot1 +
geom_point(data = geo_df, aes(x = longitude, y = latitude), color = "red", size = 2)
plot1 <- autoplot(bathy_mat, geom=c("raster", "contour"), colour="black", size=0.1) +
scale_fill_gradient2(low="dodgerblue4", mid="gainsboro", high="darkgreen")
plot1 +
geom_point(data = geo_df, aes(x = longitude, y = latitude), color = "red", size = 2)
# Plot map with isobaths every 1000m
# Plot with ggplot2
plot1 <- autoplot(bathy_mat, geom=c("raster", "contour"), colour="grey", size=0.1) +
scale_fill_gradient2(low="dodgerblue4", mid="gainsboro", high="darkgreen")
plot1 +
geom_point(data = geo_df, aes(x = longitude, y = latitude), color = "red", size = 2)
# Use get.depth to get the depth for each point
get.depth(bathy_mat, x=lon, y=lat, locator=FALSE)
