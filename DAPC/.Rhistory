julian_data <-read.delim(paste0(base_dir, "/", meta_folder, "/", meta_name))
#$version.string
#[1] "R version 3.4.4 (2018-03-15)"
# DAPC.R
# This script takes a vcf file as input, and conducts a DAPC.
# written by Eleni on 20191217
#Load the necessary libaries
library(adegenet)
library(hierfstat)
library(graphics)
library(tidyverse)
library(viridis)
library(vcfR)
######################################################################################
# specify the relative path to the base directory where you have stored folders containing data
base_dir <- "D:/sequencing_data/Herring_Coastwide_PopulationStructure/output_stacks_populations/filtered_haplotypesANDsnps_1104indiv_7261loci"
# specify the name of the folder containing vcf file
vcf_folder <- "sample_metadata"
#specify the name of the folder containing sample metadata
meta_folder <- "vcf"
# specify the vcf filename
vcf_name <- "batch_1_firstsnp_GCA900700415_mapq20.recode.sorted.vcf"
# specify the sample metadata filename
meta_name <- "Julian_date_metadata.txt"
julian_data <-read.delim(paste0(base_dir, "/", meta_folder, "/", meta_name))
setwd("~/GitHub/pacific_herring_RADseq/R/DAPC")
#$version.string
#[1] "R version 3.4.4 (2018-03-15)"
# DAPC.R
# This script takes a vcf file as input, and conducts a DAPC.
# written by Eleni on 20191217
#Load the necessary libaries
library(adegenet)
library(hierfstat)
library(graphics)
library(tidyverse)
library(viridis)
library(vcfR)
######################################################################################
# specify the relative path to the base directory where you have stored folders containing data
base_dir <- "~/GitHub/pacific_herring_RADseq/R"
#specify the name of the folder containing sample metadata
vcf_folder <- "vcf"
# specify the vcf filename
vcf_name <- "batch_1_firstsnp_GCA900700415_mapq20.recode.sorted.vcf"
# specify the name of the folder containing vcf file
meta_folder <- "sample_metadata"
# specify the sample metadata filename
meta_name <- "Julian_date_metadata.txt"
julian_data <-read.delim(paste0(base_dir, "/", meta_folder, "/", meta_name))
levels(julian_data$Population)
# Read in the data (with vcfR) and save it as a df
my_vcf <-  read.vcfR(paste0(base_dir, "/", vcf_folder, "/", vcf_name))
# Transform the data into a genind object, that hierfstat can use
my_genind <- vcfR2genind(my_vcf)
my_loci<- unique(my_genind$loc.fac)
length(my_loci) #check the number of loci
# Create a vector of individual names
name_vec <- indNames(my_genind)
head(name_vec)
tail(name_vec)
# Create a vector of population names
pop_vec <- sapply(strsplit(name_vec2, "_"), `[`, 1)
head(pop_vec)
tail(pop_vec)
# Assign those population names to your genind object
pop(my_genind) <- pop_vec
my_genind@pop #check
indNames(my_genind)
?dapc
dapc_all <- dapc(my_genind,my_genind$pop,n.pca=350,n.da=28) ##Retain all, then identify optimal number by optim.a.score
# Look at the optim_a score and choose the optimal number of PCS based on the highest value of the a-score
test_a_score <- optim.a.score(dapc_all)
dapc_all <- dapc(my_genind,my_genind$pop,n.pca=64,n.da=27)
dapc_all
# Assign those population names to your genind object
pop(my_genind) <- pop_vec
my_genind@pop #check
# Save a vector of unique locus names
my_loci<- unique(my_genind$loc.fac)
length(my_loci) #check the number of loci
# Create a vector of individual names
name_vec <- indNames(my_genind)
head(name_vec)
tail(name_vec)
# Create a vector of population names
pop_vec <- sapply(strsplit(name_vec2, "_"), `[`, 1)
head(pop_vec)
tail(pop_vec)
# Assign those population names to your genind object
pop(my_genind) <- pop_vec
my_genind@pop #check
indNames(my_genind)
dapc_all <- dapc(my_genind,my_genind$pop,n.pca=350,n.da=28) ##Retain all, then identify optimal number by optim.a.score
my_genind@pop #check
head(pop_vec)
# Create a vector of population names
pop_vec <- sapply(strsplit(name_vec, "_"), `[`, 1)
head(pop_vec)
# Assign those population names to your genind object
pop(my_genind) <- pop_vec
my_genind@pop #check
indNames(my_genind)
dapc_all <- dapc(my_genind,my_genind$pop,n.pca=350,n.da=28) ##Retain all, then identify optimal number by optim.a.score
# Look at the optim_a score and choose the optimal number of PCS based on the highest value of the a-score
test_a_score <- optim.a.score(dapc_all)
test_a_score
test_a_score$best
# Re-do the DAPC while retaining the optimal number of PCs, as identifed by the a-score
dapc_all <- dapc(my_genind,my_genind$pop,test_a_score$best,n.da=28)
DAPC_df <- as.data.frame((dapc_all$ind.coord[ , 1:6]))
# Take a quick look at the DAPC
ggplot(data = DAPC_df, aes(x= LD1, y= LD2)) +
geom_point()
# Attach some important metadata (SampleID, Population) to this dataframe
DAPC_df$SampleID <- name_vec
DAPC_df$Population <- pop_vec
plotting_df <- left_join(DAPC_df, julian_data, by = "Population")
head(plotting_df)
mybreaks=c(0, 30, 60, 90, 120, 150, 180)
mylabels = c("January", "February", "March", "April", "May", "June", "July")
dapc1 <- ggplot() +
geom_point(data = plotting_df, aes(x = LD1, y = LD2, color = julian_date, shape = Region), size = 2, alpha = 0.6)+
scale_color_viridis(option="plasma", name="Sampling date",
breaks = mybreaks,
labels = mylabels,
begin = 0, end = 0.9)+
theme_bw()+
theme(panel.grid = element_blank())
dapc1
dapc1 <-  ggplot() +
geom_point(data = plotting_df, aes(x = Axis1, y = Axis2, color = julian_date, shape = Region), size = 2, alpha = 0.6)+
scale_color_viridis(option="plasma", name="Spawning date",
breaks = mybreaks,
labels = mylabels,
begin = 0, end = 1)+
theme_bw()+
theme(panel.grid = element_blank())+
xlab("PC 1 : 0.49% variation")+
ylab("PC 2: 0.37% variation")+
scale_shape_manual(values = c(15, 2, 19))
dapc1
head(plotting_df)
dapc1 <-  ggplot() +
geom_point(data = plotting_df, aes(x = LD1, y = LD2, color = julian_date, shape = Region), size = 2, alpha = 0.6)+
scale_color_viridis(option="plasma", name="Spawning date",
breaks = mybreaks,
labels = mylabels,
begin = 0, end = 1)+
theme_bw()+
theme(panel.grid = element_blank())+
xlab("PC 1 : 0.49% variation")+
ylab("PC 2: 0.37% variation")+
scale_shape_manual(values = c(15, 2, 19))
dapc1
dapc_all$eig[1]/sum(dapc_all$eig)  ### Variance explained by first discriminant function
dapc_all$eig[2]/sum(dapc_all$eig)  ### Variance explained by second discriminant function
head(plotting_df)
# Optional - filip the DA so that the plot mirrors the geography of coast
plotting_df <- plotting_df %>%
mutate(Axis1 = -LD1)%>%
mutate(Axis2 = -LD2)
dapc1 <-  ggplot() +
geom_point(data = plotting_df, aes(x = Axis1, y = Axis2, color = julian_date, shape = Region), size = 2, alpha = 0.6)+
scale_color_viridis(option="plasma", name="Spawning date",
breaks = mybreaks,
labels = mylabels,
begin = 0, end = 1)+
theme_bw()+
theme(panel.grid = element_blank())+
xlab("DA 1 : 37% variation")+
ylab("DA 2: 20% variation")+
scale_shape_manual(values = c(15, 2, 19))
dapc1
dapc1 <-  ggplot() +
geom_point(data = plotting_df, aes(x = Axis1, y = LD2, color = julian_date, shape = Region), size = 2, alpha = 0.6)+
scale_color_viridis(option="plasma", name="Spawning date",
breaks = mybreaks,
labels = mylabels,
begin = 0, end = 1)+
theme_bw()+
theme(panel.grid = element_blank())+
xlab("DA 1 : 38% variation")+
ylab("DA 2: 19% variation")+
scale_shape_manual(values = c(15, 2, 19))
dapc1
dapc1 <-  ggplot() +
geom_point(data = plotting_df, aes(x = LD1, y = Axis2, color = julian_date, shape = Region), size = 2, alpha = 0.6)+
scale_color_viridis(option="plasma", name="Spawning date",
breaks = mybreaks,
labels = mylabels,
begin = 0, end = 1)+
theme_bw()+
theme(panel.grid = element_blank())+
xlab("DA 1 : 38% variation")+
ylab("DA 2: 19% variation")+
scale_shape_manual(values = c(15, 2, 19))
dapc1
dapc_all$eig[3]/sum(dapc_all$eig) #16%
my_genind$pop
##################################################################################################
#  CONDUCT DAPC
# DAPC function transforms the data using PCA and then performs a discriminant analysis on the retained principal components.
# In this case, we will define the groups a priori, using the sampling location as the population groupings.
# As a first pass, we will keep all principal components and discriminant components.
levels(my_genind$pop)
##################################################################################################
#  CONDUCT DAPC
# DAPC function transforms the data using PCA and then performs a discriminant analysis on the retained principal components.
# In this case, we will define the groups a priori, using the sampling location as the population groupings.
# As a first pass, we will keep all principal components and discriminant components.
length(levels(my_genind$pop))
das<- length(levels(my_genind$pop))
dapc_all <- dapc(my_genind,my_genind$pop,n.pca=350,n.da=das) ##Retain all, then identify optimal number by optim.a.score
# Look at the optim_a score and choose the optimal number of PCS based on the highest value of the a-score
test_a_score <- optim.a.score(dapc_all)
test_a_score$best
version
